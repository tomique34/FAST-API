name: Build and Deploy Code

on: [push, pull_request]

jobs:
     #   This is CI- Continous Integration part of configuration, where code is pulled, tested and built into docker image
    build:
        environment:
            name: env
        env:
            DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            ALGORITHM: ${{ secrets.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                    POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready 
                    --health-interval 10s 
                    --health-timeout 5s 
                    --health-retries 5

        runs-on: ubuntu-latest
        steps:
            - name: pulling git repo
              uses: actions/checkout@v2
            - name: Install python version 3.9
              uses: actions/setup-python@v2
              with:
                python-version: "3.9"
            - name: update pip
              run: python -m pip install --upgrade pip
            - name: Install dependencies
              run: pip install -r requirements.txt
            - name: test with pytest
              run: |
                 pip install pytest
                 pytest

            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_HUB_USERNAME }}
                password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            - name: Setup Docker buildx
              id: buildx
              uses: docker/setup-buildx-action@v2

            - name: Create BuildX cache directory
              run: mkdir -p /tmp/.buildx-cache
            
            - name: Build and push
              id: docker_build
              uses: docker/build-push-action@v4
              with:
                context: ./
                file: ./Dockerfile
                builder: ${{ steps.buildx.outputs.name }}
                push: true
                tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
                #cache-from: type=local, src=/tmp/.buildx-cache
                #cache-to: type=local, dest=/tmp/.buildx-cache,mode=max
            
            - name: Image digest
              run: echo ${{ steps.docker_build.outputs.digest }}

 #   This is CD- Continous delivery part of configuration, where code is deployed into production environment
    # deploy:
        # runs-on: ubuntu-latest
        # needs: [build]
        # environment:
        #     name: production # production environment variables should be defined on github repository secrets

        # steps:
        #     #- name: deploying stuff
            #  run: echo "going to deploy some stuff"
            #Steps below are just for reference how to deploy app to Heroku
            # 1. pull our github repo
            # 2. install heroku cli
            # 3. login to heroku
            # 4. add git remote for heroku
            # 5. git push heroku main

            # OR alternatively use github action marketplace to use existing action like "Heroku Deploy" which configuration (commented out )is shows below:
            # - name: pulling git repo
            #   uses: actions/checkout@v2
              
            # - name: Deploying to Heroku
            #   uses: akhileshns/heroku-deploy@v3.12.12 # This is heroku deploy action, it uses heroku cli under the hood
            #   with:
            #     heroku_api_key: ${{secrets.HEROKU_API_KEY}} # this is secret on github repository, it is used to authenticate with heroku
            #     heroku_app_name: ${{secrets.HEROKU_APP_NAME}} # this is secret on github repository, it is used to specify heroku app name
            #     heroku_email: ${{secrets.HEROKU_EMAIL}} # this is secret on github repository, it is used to specify heroku email
           
